<resources>
    <string name="app_name">Assignment</string>
    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>
    <string name="nav_header_title">Android Studio</string>
    <string name="nav_header_subtitle">android.studio@android.com</string>
    <string name="nav_header_desc">Navigation header</string>
    <string name="action_settings">Settings</string>
    <string name="startButton">Learn About Agile</string>
    <string name="agileheading">Agile Framework</string>
    <string name="title_activity_summary">Summary</string>
    <string name="roles_text">
    "There are several roles, which have different names depending on the methodology being followed, common to agile teams. Roles are not positions, any given person takes on one or more roles and can switch roles over time, and any given role may have zero or more people in it at any given point in a project. Usually a scrum consists of 5-11 people.\n\nThe common agile roles are:\n\nTeam lead.\nThis role, called “Scrum Master” in Scrum or team coach or project lead in other methods, is responsible for facilitating the team, obtaining resources for it, and protecting it from problems. This role encompasses the soft skills of project management but not the technical ones such as planning and scheduling, activities which are better left to the team as a whole.\n\nTeam member.\nThis role, sometimes referred to as developer or programmer, is responsible for the creation and delivery of a system. This includes modeling, programming, testing, and release activities, as well as others.\n\nStakeholder.\nA stakeholder is anyone who is a direct user, indirect user, manager of users, senior manager, operations staff member, the "gold owner" who funds the project, support (help desk) staff member, auditors, your program/portfolio manager, developers working on other systems that integrate or interact with the one under development, or maintenance professionals potentially affected by the development and/or deployment of a software project.\n\nTechnical experts.\nSometimes the team needs the help of technical experts, such as build masters to set up their build scripts or an agile DBA to help design and test their database. Technical experts are brought in on an as-needed, temporary basis, to help the team overcome a difficult problem and to transfer their skills to one or more developers on the team.\n\nDomain experts.\nThe product owner represents a wide range of stakeholders, not just end users, and in practice it isn't reasonable to expect them to be experts at every single nuance in your domain. As a result the product owner will sometimes bring in domain experts to work with the team, perhaps a tax expert to explain the details of a requirement or the sponsoring executive to explain the vision for the project.\n\nIndependent tester.\nEffective agile teams often have an independent test team working in parallel that validates their work throughout the lifecycle. This is an optional role, typically adopted only on very complex projects (or at scale)."
    </string>
    <string name="artifacts_text">
   "Project progress needs to be transparent and measurable. Agile project teams often use six main artifacts, or deliverables, to develop products and track progress, as listed here:\nProduct vision statement: An elevator pitch, or a quick summary, to communicate how your product supports the company’s or organization’s strategies. The vision statement must articulate the goals for the product.\nProduct roadmap: The product roadmap is a high-level view of the product requirements needed to achieve the product vision. It also enables a project team to outline a general timeframe for when you will develop and release those requirements. The product roadmap is a first cut and high-level view of the product backlog.\nProduct backlog: The full list of what is in the scope for your project, ordered by priority. After you have your first requirement, you have a product backlog.\nRelease plan: A high-level timetable for the release of working software.\nSprint backlog: The goal, user stories, and tasks associated with the current sprint.\nIncrement: The working product functionality, demonstrated to stakeholders at the end of the sprint, which is potentially shippable to the customer."
      </string>
    <string name="ceremonies_text">
    "Sprint Planning\nAttendees: development team, scrum master, product owner\nWhen: At the beginning of a sprint.\nDuration: Usually an hour per week of iteration–e.g. a two-week sprint kicks off with a two-hour planning meeting\nAgile Framework: Scrum. (Kanban teams also plan, of course, but they are not on a fixed iteration schedule with formal sprint planning\nPurpose: Sprint planning sets up the entire team for success throughout the sprint. Coming into the meeting, the product owner will have a prioritized product backlog. They discuss each item with the development team, and the group collectively estimates the effort involved. The development team will then make a sprint forecast outlining how much work the team can complete from the product backlog. That body of work then becomes the sprint backlog.\n\nDaily Stand-up\nAttendees: development team, scrum master, product owner\nWhen: Once per day, typically in the morning.\nDuration: No more than 15 minutes. Don't book a conference room and conduct the stand up sitting down. Standing up helps keep the meeting short!\nAgile Framework: Scrum and Kanban.\nPurpose: Stand-up is designed to quickly inform everyone of what's going on across the team. It's not a detailed status meeting. The tone should be light and fun, but informative. Have each team member answer the following questions:\nWhat did I complete yesterday?What will I work on today?Am I blocked by anything?\n\nIteration review\nAttendees:\nRequired: development team, scrum master, product owner\nOptional: project stakeholders\nWhen: At the end of a sprint or milestone.\nDuration: 30-60 minutes.\nAgile Framework: Scrum and kanban. Like planning, review for kanban teams should be aligned with team milestones rather than on a fixed cadence.\nPurpose: Iteration review is a time to showcase the work of the team. They can be in a casual format like "demo Fridays", or in a more formal meeting structure. This is the time for the team to celebrate their accomplishments, demonstrate work finished within the iteration, and get immediate feedback from project stakeholders. Remember, work should be fully demonstrable and meet the team's quality bar to be considered complete and ready to showcase in the review.\n\nRetrospective\nAttendees: development team, scrum master, product owner\nWhen: At the end of an iteration.\nDuration: 60 minutes.\nAgile Framework: Scrum and Kanban. Scrum teams do sprint retrospective based on a fixed cadence. Kanban teams can benefit from occasional retrospectives, too.\nPurpose: Agile is about getting rapid feedback to make the product and development culture better. Retrospectives help the team understand what worked well–and what didn't.\nRetrospectives aren't just a time for complaints without action. Use retrospectives to find out what's working so the team can continue to focus on those areas. Also, find out what's not working and use the time to find creative solutions and develop an action plan. Continuous improvement is what sustains and drives development within an agile team, and retrospectives are a key part of that.\n"
    </string>
    <string name="alternatives_text">
    "Waterfall\nThe Waterfall Model was the first Process Model to be introduced. It is also referred to as a linear-sequential life cycle model. It is very simple to understand and use. In a waterfall model, each phase must be completed before the next phase can begin and there is no overlapping in the phases. The Waterfall model is the earliest SDLC approach that was used for software development. The waterfall Model illustrates the software development process in a linear sequential flow. This means that any phase in the development process begins only if the previous phase is complete. In this waterfall model, the phases do not overlap.\n\nLean Startup\nLean startup is a methodology for developing businesses and products, which aims to shorten product development cycles and rapidly discover if a proposed business model is viable; this is achieved by adopting a combination of business-hypothesis-driven experimentation, iterative product releases, and validated learning. Central to the lean startup methodology is the assumption that when startup companies invest their time into iteratively building products or services to meet the needs of early customers, the company can reduce market risks and sidestep the need for large amounts of initial project funding and expensive product launches and failures.\nExtreme Programming\n\nExtreme Programming (XP) is an agile software development framework that aims to produce higher quality software, and higher quality of life for the development team. XP is the most specific of the agile frameworks regarding appropriate engineering practices for software development."
    </string>

    <string name="title_activity_introduction" translatable="false">Introduction</string>
    <string name="title_activity_roles">Roles</string>
    <string name="title_activity_ceremonies">Ceremonies</string>
    <string name="title_activity_artifacts">Artifacts</string>
    <string name="Quiz">Quiz Yourself</string>
    <string name="video">Video Lectures</string>
    <string name="course">INFS2603</string>
    <string name="learning">Learning Tool</string>
    <string name = "title_activity_alternatives">Alternatives</string>

</resources>
